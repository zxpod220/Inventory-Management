package models;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.UUID;

import database.GatewayException;
import database.WarehouseTableGateway;


public class Warehouse extends Observable implements Observer{

	public static final String ERRORMSG_INVALID_ID = "Invalid id!";
	public static final String ERRORMSG_INVALID_WAREHOUSENAME = "Invalid Warehouse name!";
	public static final String ERRORMSG_INVALID_ADDRESS = "Invalid Address!";
	public static final String ERRORMSG_INVALID_CITY = "Invalid City!";
	public static final String ERRORMSG_INVALID_STATE = "Invalid State!";
	public static final String ERRORMSG_INVALID_ZIP= "Invalid Zip!";
	public static final String ERRORMSG_INVALID_STORAGECAP = "Invalid Storage Capacity!";
	public static final String ERRORMSG_INVALID_SALARY = "Invalid salary!";
	public static final String ERRORMSG_NAME_ALREADY_EXISTS = "A Warehouse with that first and last name already exists!";
	public static final String DEFAULT_EMPTY_FULLNAME = "Unknown";
	
	public static final int INVALID_ID = 0;
	
	/**
	 * Unique id of Warehouse record
	 * Note: Should be automatically generated by the system (no setter)
	 */
	private long id;
	
	/**
	 * First and last name of Warehouse. non-unique and optional. 
	 * Default to empty string. toString will replace empty strings with "unknown"  
	 */
	private String WName, WAddress, WCity, WState, WZip;
	
	/**
	 * WSCap of Warehouse. Must be >= 0 (defaults to 0)
	 */
	private long WSCap;

	
	/**
	 * Database connection for the Warehouse (same gateway used by WarehouseList) 
	 */
	private WarehouseTableGateway gateway;
	
	public Warehouse() {
		//id is now assigned by the gateway ONLY WHEN adding a new Warehouse or fetching existing Warehouse from database
		//id = UUID.randomUUID().getLeastSignificantBits();
		//id = nextId++;
		id = INVALID_ID;
		WName = "";
		WAddress = ""; 
		WCity = "";
		WState = "";
		WZip =  "?????";
		WSCap = 0;
		//salary = Money.dollars(0d);
		//myDogs = new ArrayList<WarehouseDog>();
	}
	
	/**
	 * Creates a new Warehouse object with specified first and last names, and WSCap.
	 * @param fn First name of Warehouse (cannot be null)
	 * @param ln Last name of Warehouse (cannot be null)
	 * @param WSCap WSCap of Warehouse (must be >= 0)
	 */
	public Warehouse(String wn, String add, String wc, String ws, String wz, int wscap) {
		this();
		//validate parameters
		if(!validWarehouseName(wn))
			throw new IllegalArgumentException(ERRORMSG_INVALID_WAREHOUSENAME);
		if(!validWarehouseAddress(add))
			throw new IllegalArgumentException(ERRORMSG_INVALID_ADDRESS);
		if(!validWarehouseCity(wc))
			throw new IllegalArgumentException(ERRORMSG_INVALID_CITY);
		if(!validWarehouseState(ws))
			throw new IllegalArgumentException(ERRORMSG_INVALID_STATE);
		if(!validWarehouseZip(wz))
			throw new IllegalArgumentException(ERRORMSG_INVALID_ZIP);
		if(!validWarehouseSCap(wscap))
			throw new IllegalArgumentException(ERRORMSG_INVALID_STORAGECAP);
		WName = wn;
		WAddress = add;
		WCity = wc;
		WState = ws;
		WZip = wz;
		this.WSCap = wscap;
	}
	
	/**
	 * Constructor for Warehouse with a known salary
	 * @param fn First Name of Warehouse
	 * @param ln Last Name of Warehouse
	 * @param WSCap WSCap of Warehouse
	 * @param sal Warehouse's salary
	 */
	
	//public Warehouse(String wn, String add, String wc,String ws, String wz, int wscap) {
		//this(wn, add, wc, ws, wz, wscap);
	//}

	/**
	 * 5-argument constructor for creating a Warehouse object and setting the id (read from database)
	 * @param id Id of Warehouse instance to create (given from database) CANNOT BE 0
	 * @param fn First name
	 * @param ln Last name
	 * @param WSCap WSCap of Warehouse
	 */
	public Warehouse(long id, String wn, String add, String wc,String ws, String wz, int wscap) {
		this(wn, add, wc, ws, wz, wscap);
		if(id < 1)
			throw new IllegalArgumentException(ERRORMSG_INVALID_ID);
		setId(id);
	}
	
	/**
	 * Returns the Warehouse's hopefully unique id
	 * @return
	 */
	public long getId() {
		return id;
	}

	/**
	 * Sets Warehouse's id
	 * Should only be called by the gateway when fetching Warehouse record from database (via fetch or add)
	 * @param id
	 */
	public void setId(long id) {
		this.id = id;
	}
	
	/**
	 * Returns first name of Warehouse
	 * @return
	 */
	public String getWarehouseName() {
		return WName;
	}

	/**
	 * Determines if given first name value is valid
	 * Rules: cannot be null, length must be >= 0 and <= 255 
	 * @param fn First name value to test
	 * @return
	 */
	public boolean validWarehouseName(String wn) {
		if(wn == null)
			return false;
		if(wn.length() > 255)
			return false;
		return true;
	}
	
	/**
	 * Sets first name of Warehouse
	 * First name cannot be null
	 * @return
	 */
	public void setWarehouseName(String WName) {
		if(!validWarehouseName(WName))
			throw new IllegalArgumentException(ERRORMSG_INVALID_WAREHOUSENAME);
		this.WName = WName;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	/**
	 * Returns last name of Warehouse
	 * @return
	 */
	public String getWarehouseAddress() {
		return WAddress;
	}
	
	/**
	 * Determines if given last name value is valid
	 * Rules: cannot be null, length must be >= 0 and <= 255 
	 * @param ln Last name value to test
	 * @return
	 */
	public boolean validWarehouseAddress(String add) {
		if(add == null)
			return false;
		if(add.length() > 255)
			return false;
		return true;
	}

	/**
	 * Sets last name of Warehouse
	 * Last name cannot be null
	 * @return
	 */
	public void setWarehouseAddress(String WAddress) {
		if(!validWarehouseAddress(WAddress))
			throw new IllegalArgumentException(ERRORMSG_INVALID_ADDRESS);
		this.WAddress = WAddress;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	public String getWarehouseCity() {
		return WCity;
	}

	public boolean validWarehouseCity(String city) {
		if(city == null)
			return false;
		if(city.length() > 100)
			return false;
		return true;
	}
	
	public void setWarehouseCity(String city) {
		if(!validWarehouseCity(WCity))
			throw new IllegalArgumentException(ERRORMSG_INVALID_CITY);
		this.WCity = city;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	//State
	public String getWarehouseState() {
		return WState;
	}
	public boolean validWarehouseState(String state){
		if(state == null)
		return false;
		if(state.length() > 50)
			return false;
		return true;
	}
	
	public void setWarehouseState(String State){
		if(!validWarehouseState(State))
			throw new IllegalArgumentException(ERRORMSG_INVALID_STATE);
		this.WState = State;
		setChanged();
	}
	
	
	//Zip code
	public String getWarehouseZip() {
		return WZip;
	}
	
	public boolean validWarehouseZip(String Zip){
		if(Zip == null)
			return false;
		if(Zip.length() > 5)
			return false;
		if(Zip.length() == 5)
			return true;
		return false;
	}
	public void setWarehouseZip(String Zip){
		if(!validWarehouseState(Zip))
			throw new IllegalArgumentException(ERRORMSG_INVALID_ZIP);
		this.WZip = Zip;
		setChanged();
	}

	/**
	 * Returns WSCap of Warehouse
	 * @return
	 */
	public long getWarehouseSCap() {
		return WSCap;
	}

	/**
	 * Determines if given age value is valid
	 * Rules: 0 <= wscap
	 * @param age value to test
	 * @return
	 */
	public boolean validWarehouseSCap(long l) {
		if(l < 0)
			return false;
		return true;
	}

	/**
	 * Sets age of Warehouse
	 * Age must be >= 0
	 * @return
	 */
	public void setWarehouseSCap(long l) {
		if(!validWarehouseSCap(l))
			throw new IllegalArgumentException(ERRORMSG_INVALID_STORAGECAP);
		this.WSCap = l;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	

	

	/**
	 * Helper method to return either Warehouse's full name with space between or "Unknown" if blank
	 * @return
	 */
	public String getFullName() {
		String ret = WName;
		ret = ret.trim();
		if(ret.length() == 0)
			ret = DEFAULT_EMPTY_FULLNAME;
		return ret;
	}
	
	/**
	 * Pass-through to gateway to determine if first name/last name combo already exists in database
	 * @param id Id of Warehouse 
	 * @param fn First name of Warehouse to check in database
	 * @param ln Last name of Warehouse to check in database
	 * @return true if Warehouse already exists, else false
	 */
	public boolean WarehouseAlreadyExists(long id, String wn, String add, String wc, String ws, String wz, int wsc) {
		//if first and last name are already in the database AND id does not match
		//then return true
		//else return false
		try {
			return gateway.WarehouseAlreadyExists(id, wn);
		} catch (GatewayException e) {
			return true;
		}
	}
	
	/**
	 * Tells the model that update has finished so it can finish the update
	 * E.g., notify observers
	 */
	public void finishUpdate() throws GatewayException {
		Warehouse orig = null;
		//if insert, check if this Warehouse's full name already exists in the database
		//if so then cancel update 
		if(this.getId() == 0) {
			if(gateway.WarehouseAlreadyExists(0, this.getWarehouseName()))
				throw new GatewayException(this.getWarehouseName() + " is already in the database");
		}
		try {
			//if id is 0 then this is a new Warehouse to insert, else its an update
			if(this.getId() == 0) {
				//set id to the long returned by insertWarehouse
				this.setId(gateway.insertWarehouse(this));
				
			} else {
				//fetch Warehouse from db table in case this fails
			
				orig = gateway.fetchWarehouse(this.getId());
		
				//try to save to the database
				gateway.saveWarehouse(this);

			}
			//if gateway ok then notify observers
			notifyObservers();
			
		} catch(GatewayException e) {
			System.out.println(e.getMessage());
			//if fails then try to refetch model fields from the database
			if(orig != null) {
				this.setWarehouseName(orig.getWarehouseName());
				this.setWarehouseAddress(orig.getWarehouseAddress());
				this.setWarehouseCity(orig.getWarehouseCity());
				this.setWarehouseState(orig.getWarehouseState());
				this.setWarehouseZip(orig.getWarehouseZip());
				this.setWarehouseSCap(orig.getWarehouseSCap());
			}
			throw new GatewayException("Error trying to save the Warehouse object!");
		}
	}
	
	/**
	 * delete this object through the gateway (i.e., db)
	 */
	public void delete() throws GatewayException {
		//if id is 0 then nothing to do in the gateway (record has not been saved yet
		if(this.getId() == 0) 
			return;
			try {
				gateway.deleteWarehouse(this.getId());
			} catch (GatewayException e) {
				throw new GatewayException(e.getMessage());
			}


	}
	
	/**
	 * Default string output of Warehouse
	 * Id is currently based on UUID so the output string may be rather long
	 */
	@Override
	public String toString() {
		String ret = getWarehouseName();
		
		ret+= "Address: " + WAddress;
		ret+= "City: " + WCity;
		ret+= "State: " + WState;
		ret+= "Zip: " + WZip; 
		ret += " Warehouse Storage Capacity: " + WSCap;
		ret += " Id: " + id;
		
		return ret;
			
	}
	
	/**
	 * Accessors for gateway
	 * @return
	 */
	public WarehouseTableGateway getGateway() {
		return gateway;
	}

	public void setGateway(WarehouseTableGateway gateway) {
		this.gateway = gateway;
	}


	@Override
	public void update(Observable o, Object arg) {
		//if observable is Warehouse_dog then notify Warehouse's observers
		//if(o instanceof WarehouseDog) {
			//this.setChanged();
			//this.notifyObservers();
		//}
		
	}

}
