package models;

import java.util.Observable;

import controller.MDIParent;
import database.UserTableGateway;
import database.GatewayException;

public class Users extends Observable{
	public static final String ERRORMSG_INVALID_ID = "Invalid id!";
	public static final String DEFAULT_EMPTY_INVENTORYNAME = "Unknown";

	public static final int INVALID_ID = 0;
	
	/**
	 * Unique id of User record
	 * Note: Should be automatically generated by the system (no setter)
	 */
	private long id;
	
	/**
	 * Default to empty string. toString will replace empty strings with "unknown"  
	 */
	
	private String user, password, fullName;
	private String add, edit, delete;
	
	/**
	 * Database connection for the User (same gateway used by PersonUser) 
	 */
	private UserTableGateway gateway;

	public Users() {
		id = INVALID_ID;
		user = password = fullName = null;
		add = edit = delete = "no";
	}

	
	public Users( String user, String password, String fullName, String add, String edit, String delete ) {
		this();
		//validate parameters
		
		this.id = INVALID_ID;
		this.user = user;
		this.password = password;
		this.fullName = fullName;
		this.add = add;
		this.edit = edit;
		this.delete = delete;
	}
	
	public Users( long id, String user, String password, String fullName, String add, String edit, String delete) {
		this( user, password, fullName, add, edit, delete );
		this.id = id;
	}
	
	/**
	 * Tells the model that update has finished so it can finish the update
	 * E.g., notify observers
	 */
	public void finishUpdate() throws GatewayException {
		Users orig = null;

		try {
			//if id is 0 then this is a new User to insert, else its an update
			if(this.getId() == 0) {
				//set id to the long returned by insertPerson
				this.setId(gateway.insertUser(this));
				
			} else {
				//fetch dog from db table in case this fails
			
				orig = gateway.fetchUser(this.getId());
				
				//try to save to the database
				gateway.saveUser(this);
				
			}
			
			//if gateway ok then notify observers
			//System.out.println("DEBUG: User notify");
			notifyObservers();
			
		} catch(GatewayException e) {
			//if fails then try to refetch model fields from the database
			if(orig != null) {
				
			}
			throw new GatewayException("Error trying to save the User object!");
		}
	}
	
	/**
	 * delete this object through the gateway (i.e., db)
	 */
	public void delete() throws GatewayException {
		//if id is 0 then nothing to do in the gateway (record has not been saved yet)
		if(this.getId() == 0) 
			return;
			try {
				gateway.deleteUser(this.getId());
			} catch (GatewayException e) {
				throw new GatewayException(e.getMessage());
			}
	}

	public WarehouseList getWarehouseList(MDIParent m){
		return m.getWarehouseList();
	}
	
	public PartsList getPartList(MDIParent m){
		return m.getPartsList();
	}
	
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	/**
	 * for user
	 * @return
	 */
	
	public String getUser() {
		return this.user;
	}
	
	public boolean validUser(String user) {
		if( user.length() < 2)
			return false;
		return true;
		
	}
	
	public void setUser(String user) {
		if(!validUser(user))
			throw new IllegalArgumentException("User error");
		this.user = user;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	/**
	 * for password
	 * @return
	 */
	
	public String getPassword() {
		return this.password;
	}
	
	public boolean validPassword(String password) {
		if(password.length() < 2)
			return false;
		
		return true;
		
	}
	
	public void setPassword(String password) {
		if(!validPassword(password))
			throw new IllegalArgumentException("Password error");
		this.password = password;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	/**
	 * for fullName
	 * @return
	 */
	
	public String getFullname() {
		return this.fullName;
	}
	
	public boolean validFullName(String fullName) {
		if(fullName.length() < 2)
			return false;
		
		return true;
		
	}
	
	
	public void setFullName(String fullName) {
		if(!validFullName(fullName))
			throw new IllegalArgumentException("Name Error");
		this.fullName = fullName;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	/**
	 *  get function
	 * @return
	 */
	
	/**
	 *  for Add
	 * @return
	 */
	
	public String getAdd(){
		return this.add;
	}
	
	public void setAdd(String add){
		if(!getValidAdd(add))
			throw new IllegalArgumentException("Add Error");
		this.add = add;
	}
	
	public boolean getValidAdd(String add){
		add = add.toLowerCase().trim();
		
		if( add.equals("no") || add.equals("yes"))
			return true;
		else
			return false;	
	}
	/**
	 * for edit
	 * @return
	 */
	public String getEdit(){
		return this.edit;
	}
	
	public void setEdit(String edit){
		if(!getValidEdit(edit))
			throw new IllegalArgumentException("Edit Error");
		
		this.edit = edit.toLowerCase().trim();
	}
	
	public boolean getValidEdit(String edit){
		edit = edit.toLowerCase().trim();
		
		if( edit.equals("no") || edit.equals("yes"))
			return true;
		else
			return false;	
	}
	
	/**
	 * for delete
	 * @return
	 */
	public String getDelete(){
		
		return this.delete;
	}
	
	public void setDelete(String delete){
		if(!getValidDelete(delete))
			throw new IllegalArgumentException("Delete Error");
		
		this.delete = delete.toLowerCase().trim();
	}
	
	public boolean getValidDelete(String delete){
		delete = delete.toLowerCase().trim();
		
		if( delete.equals("no") || delete.equals("yes"))
			return true;
		else
			return false;	
	}
	
	public UserTableGateway getGateway() {
		return gateway;
	}

	public void setGateway(UserTableGateway gateway) {
		this.gateway = gateway;
	}
}
