package models;

import java.sql.Timestamp;
import java.util.Observable;
import java.util.Observer;

import database.PartsTableGateway;
import database.PartsTableGateway;
import database.GatewayException;

public class Parts extends Observable implements Observer {
	public static final String ERRORMSG_INVALID_ID = "Invalid id!";
	public static final String ERRORMSG_INVALID_PARTNUMBER = "Invalid Part number!";
	public static final String ERRORMSG_INVALID_PARTSNAME = "Invalid Part name!";
	public static final String ERRORMSG_INVALID_UNITOFQUANTITY = "Invalid unit of quantity!";
	public static final String ERRORMSG_INVALID_VENDOR = "Invalid vendor!";
	public static final String ERRORMSG_INVALID_VENDORPARTNUMBER = "Invalid vendor part number!";
	public static final String DEFAULT_EMPTY_PARTNUMBER = "Unknown";
	public static final String DEFAULT_EMPTY_PARTSNAME = "Unknown";
	public static final String DEFAULT_EMPTY_UNITOFQUANTITY = "Unknown";
	public static final String DEFAULT_EMPTY_VENDOR = "Unknown";
	public static final String DEFAULT_EMPTY_VENDORPNUM = "Unknown";

	public static final int INVALID_ID = 0;
	
	/**
	 * Unique id of Parts record
	 * Note: Should be automatically generated by the system (no setter)
	 */
	private long id;
	
	/**
	 * must be >= 0
	 * init to 0
	 */
	private String partnumber;
	/**
	 * Cannot be null, 0 < len(PartsName) <= 255
	 * init to empty
	 */
	
	private String PartsName;
	

	/**
	 * "Linear Ft. or Pieces
	 */
	private String UoQ;
	
	/**
	 * A (alive), D (dead), Z (unknown)
	 */
	private String vendor;
	
	/**
	 * fk to Parts_breed table (Unknown is id 1)
	 */
	private String vendorpnum;
	
	private String user_access;
	
	/**
	 * Database connection for the Parts (same gateway used by PersonParts) 
	 */
	private PartsTableGateway gateway;

	public Parts() {
		id = INVALID_ID;
		PartsName = DEFAULT_EMPTY_PARTSNAME;
		partnumber = DEFAULT_EMPTY_PARTNUMBER;
		UoQ = DEFAULT_EMPTY_UNITOFQUANTITY;
		vendor = DEFAULT_EMPTY_VENDOR;
		vendorpnum = DEFAULT_EMPTY_VENDORPNUM ;
	}

	public Parts(String pnum, String pn, String uoq, String v, String vpnum) {
		this();
		//validate parameters
		if(!validPartNum(pnum))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PARTNUMBER);
		if(!validPartsName(pn))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PARTSNAME);
		if(!validUnitofQuantity(uoq))
			throw new IllegalArgumentException(ERRORMSG_INVALID_UNITOFQUANTITY);
		if(!validVendor(v))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDOR);
		if(!validVPNum(vpnum))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDORPARTNUMBER);
		partnumber = pnum;
		PartsName = pn;
		UoQ = uoq;
		vendor = v;
		vendorpnum = vpnum;
	
	}
	
	public Parts(long id, String pnum, String pn, String uoq, String v, String vpnum) {
		this.id = id;
		this.partnumber = pnum;
		this.PartsName = pn;
		this.UoQ = uoq;
		this.vendor = v;
		this.vendorpnum = vpnum;
	}

	/**
	 * Tells the model that update has finished so it can finish the update
	 * E.g., notify observers
	 */
	public void finishUpdate() throws GatewayException {
		Parts orig = null;

		
			//if id is 0 then this is a new Parts to insert, else its an update
			if(this.getId() == 0) {
				if(gateway.PartsNumberAlreadyExists(0, this.getPartNumber()))
					throw new GatewayException(this.getPartNumber() + " is already in teh database");
			}
			try {
				if(this.getId() == 0){
				//set id to the long returned by insertPerson
				this.setId(gateway.insertParts(this));
				
			} else {
				//fetch Parts from db table in case this fails
			
				orig = gateway.fetchParts(this.getId());
		
				//try to save to the database
				gateway.saveParts(this);

			}
			
			//if gateway ok then notify observers
			//System.out.println("DEBUG: Parts notify");
			notifyObservers();
			
		} catch(GatewayException e) {
			System.out.println(e.getMessage());
			//if fails then try to refetch model fields from the database
			if(orig != null) {
				this.setPartsName(orig.getPartsName());
				this.setPartNumber(orig.getPartNumber());
				this.setUnitOQ(orig.getUnitOQ());
				this.setVendor(orig.getVendor());
				this.setVendorPNum(orig.getVendorPNum());
			}
			throw new GatewayException("Error trying to save the Parts object!");
		}
	}

	/**
	 * delete this object through the gateway (i.e., db)
	 */
	public void delete() throws GatewayException {
		//if id is 0 then nothing to do in the gateway (record has not been saved yet)
		if(this.getId() == 0) 
			return;
			try {
				gateway.deleteParts(this.getId());
			} catch (GatewayException e) {
				throw new GatewayException(e.getMessage());
			}
	}

	/**
	 * valid Parts name must not be null, and be > 0 length and <= 255 length
	 * @param dn Parts name to test for validity
	 * @return true if Parts name is valid, else false
	 */
	public boolean validPartsName(String dn) {
		if(dn == null)
			return false;
		String test = dn.trim(); 
		if(test.length() > 255)
			return false;
		if(test.length() == 0)
			return false;
		return true;
	}

	/**
	 * Determines if given age value is valid
	 * Rules: 0 <= age <= 200 
	 * @param age value to test
	 * @return
	 */
	public boolean validPartNum(String pnum) {
		if(pnum == null)
			return false;
		if(pnum.length() > 20)
			return false;
		if(pnum.length() == 0)
			return false;
		return true;
	}
	
	public boolean validUnitofQuantity(String uoq) {
		if(uoq.equals("Linear Ft."))
		return true;
		if(uoq.equals("Pieces"))
			return true;
		return false;
	}
	
	public boolean validVendor(String v){
		if(v == null)
			return false;
		String test = v.trim(); 
		if(test.length() > 255)
			return false;
		if(test.length() == 0)
			return false;
		return true;

	}
	
	public boolean validVPNum(String vp){
		if(vp == null)
			return false;
		String test = vp.trim(); 
		if(test.length() > 255)
			return false;
		if(test.length() == 0)
			return false;
		return true;

	}
	
	/**
	 * Default string output of Parts
	 */
	@Override
	public String toString() {
	String ret = getPartNumber();
	
	
	ret += "Part Name: " + PartsName;
	ret += "Unit of Quantity: " + UoQ;
	ret += "Vendor: " + vendor;
	ret += "Vendor Part Number: " + vendorpnum;
	ret += "Id: " + id;
		
		return ret;
			
	}

	// Accessors
	
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getPartsName() {
		return PartsName;
	}

	public void setPartsName(String PartsName) {
		if(!validPartsName(PartsName))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PARTSNAME);
		this.PartsName = PartsName;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	public String getPartNumber() {
		return partnumber;
	}

	public void setPartNumber(String pnum) {
		if(!validPartNum(pnum))
			throw new IllegalArgumentException(ERRORMSG_INVALID_PARTNUMBER);
		this.partnumber = pnum;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	public String getUnitOQ() {
		return UoQ;
	}

	public void setUnitOQ(String uoq) {
		if(!validUnitofQuantity(uoq))
			throw new IllegalArgumentException(ERRORMSG_INVALID_UNITOFQUANTITY);
		this.UoQ = uoq;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	public String getVendor() {
		return vendor;
	}

	public void setVendor(String v) {
		if(!validVendor(v))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDOR);
		this.vendor = v;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	public String getVendorPNum() {
		return vendorpnum;
	}

	public void setVendorPNum(String vpnum) {
		if(!validVPNum(vpnum))
			throw new IllegalArgumentException(ERRORMSG_INVALID_VENDORPARTNUMBER);
		this.vendorpnum = vpnum;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}

	public PartsTableGateway getGateway() {
		return gateway;
	}

	public void setGateway(PartsTableGateway gateway) {
		this.gateway = gateway;
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto-generated method stub
		
	}
	public boolean PartsNumberAlreadyExists(long id, String pnum) {
		//if first and last name are already in the database AND id does not match
		//then return true
		//else return false
		try {
			return gateway.PartsNumberAlreadyExists(id, pnum);
		} catch (GatewayException e) {
			return true;
		}
	}
	public void setUserAccess(String user){
		this.user_access = user;
	}
	
	public String getUserAccess(){
		return this.user_access;
	}
	 

}
